{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1cb1d18c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n"
     ]
    }
   ],
   "source": [
    "# Find the factorial of a number:\n",
    "\n",
    "def factorial(n):\n",
    "    if n == 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return n * factorial(n - 1)\n",
    "\n",
    "# Example\n",
    "result = factorial(5)\n",
    "print(result)  # Output: 120\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6c54488c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "# Find the largest element in a list:\n",
    "\n",
    "def find_largest(lst):\n",
    "    return max(lst)\n",
    "\n",
    "# Example\n",
    "result = find_largest([1, 3, 5, 7, 9])\n",
    "print(result)  # Output: 9\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "264025bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "olleh\n"
     ]
    }
   ],
   "source": [
    "# Reverse a string:\n",
    "\n",
    "def reverse_string(s):\n",
    "    return s[::-1]\n",
    "\n",
    "# Example\n",
    "result = reverse_string(\"hello\")\n",
    "print(result)  # Output: \"olleh\"\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "24fd4b02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "Check if a string is a palindrome:\n",
    "\n",
    "\n",
    "def is_palindrome(s):\n",
    "    return s == s[::-1]\n",
    "\n",
    "# Example\n",
    "result = is_palindrome(\"radar\")\n",
    "print(result)  # Output: True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e3b2e2fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 1, 2: 2, 3: 3, 4: 1}\n"
     ]
    }
   ],
   "source": [
    "# Count the frequency of each element in a list:\n",
    "\n",
    "from collections import Counter\n",
    "\n",
    "def count_frequency(lst):\n",
    "    return dict(Counter(lst))\n",
    "\n",
    "# Example\n",
    "result = count_frequency([1, 2, 2, 3, 3, 3, 4])\n",
    "print(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 1}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bfc08ab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# Check if a number is prime:#\n",
    "\n",
    "def is_prime(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(n**0.5) + 1):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "# Example\n",
    "result = is_prime(7)\n",
    "print(result)  # Output: True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d3f72182",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4]\n"
     ]
    }
   ],
   "source": [
    "# Find the common elements between two lists:\n",
    "\n",
    "def common_elements(list1, list2):\n",
    "    return list(set(list1) & set(list2))\n",
    "\n",
    "# Example\n",
    "result = common_elements([1, 2, 3, 4], [3, 4, 5, 6])\n",
    "print(result)  # Output: [3, 4]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "95549e9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# Find the second largest number in a list:\n",
    "\n",
    "def second_largest(lst):\n",
    "    lst = list(set(lst))\n",
    "    lst.sort()\n",
    "    return lst[-2]\n",
    "\n",
    "# Example\n",
    "result = second_largest([1, 2, 3, 4, 5])\n",
    "print(result)  # Output: 4\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fd62a97b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "# Remove duplicates from a list:\n",
    "\n",
    "def remove_duplicates(lst):\n",
    "    return list(set(lst))\n",
    "\n",
    "# Example\n",
    "result = remove_duplicates([1, 2, 2, 3, 4, 4, 5])\n",
    "print(result)  # Output: [1, 2, 3, 4, 5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "876162f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# count vowels in a word:\n",
    "\n",
    "def count_vowels(word):\n",
    "    vowels = \"aeiouAEIOU\"\n",
    "    return sum(1 for char in word if char in vowels)\n",
    "\n",
    "# Example\n",
    "result = count_vowels(\"hello\")\n",
    "print(result)  # Output: 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d27c125d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "##Count the number of occurrences of a character in a string:\n",
    "\n",
    "def count_char_occurrences(s, char):\n",
    "    return s.count(char)\n",
    "\n",
    "# Example\n",
    "result = count_char_occurrences(\"banana\", \"a\")\n",
    "print(result)  # Output: 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d2ac6ac2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "# Find the maximum number in a list:\n",
    "\n",
    "def find_max(lst):\n",
    "    return max(lst)\n",
    "\n",
    "# Example\n",
    "result = find_max([1, 2, 3, 4, 5])\n",
    "print(result)  # Output: 5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "28778d69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "# Find the minimum number in a list:\n",
    "def find_min(lst):\n",
    "    return min(lst)\n",
    "\n",
    "# Example\n",
    "result = find_min([1, 2, 3, 4, 5])\n",
    "print(result)  # Output: 1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6ef3b004",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "# Find the smallest number among three:\n",
    "\n",
    "def find_smallest(a, b, c):\n",
    "    return min(a, b, c)\n",
    "\n",
    "# Example\n",
    "result = find_smallest(3, 1, 2)\n",
    "print(result)  # Output: 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cd8b681f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n"
     ]
    }
   ],
   "source": [
    "# Calculate the square of a given number:\n",
    "\n",
    "def square_number(n):\n",
    "    return n * n\n",
    "\n",
    "# Example\n",
    "result = square_number(4)\n",
    "print(result)  # Output: 16\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b4915847",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36\n"
     ]
    }
   ],
   "source": [
    "# Calculate LCM of two numbers\n",
    "\n",
    "def gcd(x, y):\n",
    "    while y:\n",
    "        x, y = y, x % y\n",
    "    return x\n",
    "\n",
    "def lcm(x, y):\n",
    "    return x * y // gcd(x, y)\n",
    "\n",
    "# Example\n",
    "result = lcm(12, 18)\n",
    "print(result)  # Output: 36\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7f4b3bb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    }
   ],
   "source": [
    "# Copy one string to another string:\n",
    "\n",
    "def copy_string(s):\n",
    "    return s[:]\n",
    "\n",
    "# Example\n",
    "result = copy_string(\"hello\")\n",
    "print(result)  # Output: \"hello\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "65ba7ab0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ehllo\n"
     ]
    }
   ],
   "source": [
    "# Sort characters of a string in ascending order:\n",
    "\n",
    "def sort_string_ascending(s):\n",
    "    return ''.join(sorted(s))\n",
    "\n",
    "# Example\n",
    "result = sort_string_ascending(\"hello\")\n",
    "print(result)  # Output: \"ehllo\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "85d41aa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ollhe\n"
     ]
    }
   ],
   "source": [
    "# Sort characters of a string in descending order:\n",
    "\n",
    "def sort_string_descending(s):\n",
    "    return ''.join(sorted(s, reverse=True))\n",
    "\n",
    "# Example\n",
    "result = sort_string_descending(\"hello\")\n",
    "print(result)  # Output: \"ollhe\"\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4a7cd10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
